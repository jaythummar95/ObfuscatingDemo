import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, SafeAreaView, Platform } from 'react-native';


import messaging from '@react-native-firebase/messaging';
import firebase from '@react-native-firebase/app'
import PushNotification from 'react-native-push-notification'


function Pushnotification() {

    useEffect(() => {
        setUpNotification();
    })

    const setUpNotification = async () => {
        const defaultAppMessaging = firebase.messaging();
        const token = await defaultAppMessaging.getToken();
        console.log("## fcm token", token)

        if (!defaultAppMessaging.isDeviceRegisteredForRemoteMessages) {
            await defaultAppMessaging.registerDeviceForRemoteMessages();
        }

        if (Platform.OS == 'android') {
            defaultAppMessaging.onMessage(async (remoteMessage) => {
                console.log("## remote message", JSON.stringify(remoteMessage))
                console.log("## remote message", remoteMessage.messageId)

                PushNotification.createChannel(
                    {
                        channelId: remoteMessage.messageId, // (required)
                        channelName: `Custom channel - Counter: ${remoteMessage.messageId}`, // (required)
                        channelDescription: `A custom channel to categorise your custom notifications. Updated at: ${Date.now()}`, // (optional) default: undefined.
                        soundName: "default", // (optional) See `soundName` parameter of `localNotification` function
                        importance: 4, // (optional) default: 4. Int value of the Android notification importance
                        vibrate: true, // (optional) default: true. Creates the default vibration patten if true.
                    },
                    (created) => console.log(`createChannel returned '${created}'`) // (optional) callback returns whether the channel was created, false means it already existed.
                );

                let data;
                console.log(remoteMessage.hasOwnProperty('data'));
                if (remoteMessage.hasOwnProperty('data')) {
                    let notification = remoteMessage.data
                    data = { message: notification.message, title: "Notification Title", };
                    console.log(data);
                } else {
                    data = remoteMessage.data
                }



                PushNotification.localNotification({
                    /* Android Only Properties */
                    // id: "0", // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                    vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
                    priority: "high", // (optional) set notification priority, default: high
                    importance: 4, // (optional) set notification importance, default: high
                    /* iOS and Android properties */
                    title: data.title, // (optional)
                    message: data.message,// remoteMessage.data.message, // (required),
                    channelId: remoteMessage.messageId,
                    bigPictureUrl: data.image,
                });

            })


        }
    }


    const content = () => {
        return (
            <View style={styles.container}>
                <SafeAreaView />
            </View>
        )
    }
    return content();
}
const styles = StyleSheet.create({
    container: {
        flex: 1.0
    }
})
export default Pushnotification;